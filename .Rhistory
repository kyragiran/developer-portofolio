library(MASS)
set.seed(123)
library(mice)
library(dplyr)
library(furrr)
library(magrittr)
# Generate multivariate normal data
generate_data <- function(n = 500, p = 50) {
mu <- rep(0, p)
sigma <- diag(p)
data <- mvrnorm(n, mu, sigma)
return(as.data.frame(data))
}
simdata <- list(generate_data())
head(simdata)
# MCAR function
dbased <- list(
MCAR = simdata %>%
furrr::future_map(function(x) {
x %>%
ampute(prop = 0.5,
mech = "MCAR") %>%
.$amp %>%
mice(m = 5,
maxit = 5,
method = "norm",
print = FALSE)
}, .options = furrr_options(seed = 123))
)
# MAR function
introduce_mar <- function(data, missing_prop = 0.1) {
# Ensure the first column is used for sorting
sorted_indices <- order(data[[1]], decreasing = TRUE)  # Sort by the first column
data_with_na <- data
n <- nrow(data)
# Select rows to introduce missingness
num_missing <- ceiling(missing_prop * n)
missing_indices <- sorted_indices[1:num_missing]
# Randomly select a target column (excluding the first)
target_col <- sample(2:ncol(data), 1)
# Introduce missingness
data_with_na[missing_indices, target_col] <- NA
return(data_with_na)
}
# Use the first dataset from simdata
data_mar_25 <- introduce_mar(simdata[[1]], 0.25)
# Show the first few rows of the dataset with MAR missingness
head(data_mar_25)
# 10% MCAR Simulation
mbased_MCAR_10 <- simdata %>%
furrr::future_map(function(x) {
x %>%
ampute(prop = 0.1, mech = "MCAR") %>%
.$amp %>%
mice(m = 5, maxit = 5, method = "norm", print = FALSE)
}, .options = furrr_options(seed = 123))
evaluate_simulation <- function(mbased_MCAR) {
mbased_MCAR %>%
purrr::map(~.x %>%
complete("all") %>%
purrr::map(~.x %$%
lm(V1 ~ V2 + V3)) %>%  # fit linear model (adjust vars as needed)
pool() %>%
summary(conf.int = TRUE) %>%
mutate(true = c(0, 0, 0),  # true values (example)
cov = `2.5 %` < true & true < `97.5 %`,
bias = estimate - true) %>%
as.data.frame() %>%  # Convert to a data frame
`rownames<-`(.$term)) %>%  # Set rownames using the "term" column
Reduce("+", .) / length(mbased_MCAR)  }
# Evaluate 10% MCAR
eval_mcar_10 <- evaluate_simulation(mbased_MCAR_10)
eval_mcar_10
mbased_MCAR_10 <- lapply(mbased_MCAR_10, function(x) {
x %>% complete("all") %>%
purrr::map(~.x %>% mutate(across(everything(), as.numeric)))
})
# 10% MCAR Simulation
mbased_MCAR_10 <- simdata %>%
furrr::future_map(function(x) {
x %>%
ampute(prop = 0.1, mech = "MCAR") %>%
.$amp %>%
mice(m = 5, maxit = 5, method = "norm", print = FALSE)
}, .options = furrr_options(seed = 123))
# 10% MCAR Simulation
mbased_MCAR_10 <- simdata %>%
furrr::future_map(function(x) {
x %>%
ampute(prop = 0.1, mech = "MCAR") %>%
.$amp %>%
mice(m = 5, maxit = 5, method = "norm", print = FALSE)
}, .options = furrr_options(seed = 123))
evaluate_simulation <- function(mbased_MCAR) {
mbased_MCAR %>%
purrr::map(~.x %>%
complete("all") %>%
purrr::map(~.x %$%
lm(V1 ~ V2 + V3)) %>%  # fit linear model (adjust vars as needed)
pool() %>%
summary(conf.int = TRUE) %>%
mutate(true = c(0, 0, 0),  # true values (example)
cov = `2.5 %` < true & true < `97.5 %`,
bias = estimate - true) %>%
as.data.frame() %>%  # Convert to a data frame
`rownames<-`(.$term)) %>%  # Set rownames using the "term" column
Reduce("+", .) / length(mbased_MCAR)  }
# Evaluate 10% MCAR
eval_mcar_10 <- evaluate_simulation(mbased_MCAR_10)
evaluate_simulation <- function(mbased_MCAR) {
mbased_MCAR %>%
purrr::map(~.x %>%
complete("all") %>%  # Extract all imputed datasets
purrr::map(~mutate(.x, across(everything(), as.numeric))) %>%  # Ensure numeric columns
purrr::map(~with(.x, lm(V1 ~ V2 + V3))) %>%  # Fit models
pool() %>%  # Pool coefficients
summary(conf.int = TRUE) %>%
mutate(true = c(0, 0, 0),  # True values (example)
cov = `2.5 %` < true & true < `97.5 %`,  # Coverage
bias = estimate - true) %>%  # Bias
as.data.frame() %>%  # Convert to data frame
`rownames<-`(.$term)) %>%  # Set row names
Reduce("+", .) / length(mbased_MCAR)  # Average across imputations
}
# Evaluate 10% MCAR
eval_mcar_10 <- evaluate_simulation(mbased_MCAR_10)
evaluate_simulation <- function(mbased_MCAR) {
mbased_MCAR %>%
purrr::map(~{
imputed <- .x %>% complete("all")
print(sapply(imputed, class))  # Check column classes
imputed <- purrr::map(imputed, ~mutate(.x, across(everything(), as.numeric)))
purrr::map(imputed, ~with(.x, lm(V1 ~ V2 + V3))) %>%
pool() %>%
summary(conf.int = TRUE) %>%
mutate(true = c(0, 0, 0),
cov = `2.5 %` < true & true < `97.5 %`,
bias = estimate - true) %>%
as.data.frame() %>%
`rownames<-`(.$term)
}) %>%
Reduce("+", .) / length(mbased_MCAR)
}
test_mbased_MCAR <- mbased_MCAR_10[[1]] %>% complete("all")
print(sapply(test_mbased_MCAR, class))  # Check for factors
test_mbased_MCAR <- purrr::map(test_mbased_MCAR, ~mutate(.x, across(everything(), as.numeric)))
eval_mcar_10 <- evaluate_simulation(mbased_MCAR_10)
print(eval_mcar_10)
# 25% MCAR Simulation
mbased_MCAR_25 <- simdata %>%
furrr::future_map(function(x) {
x %>%
ampute(prop = 0.25, mech = "MCAR") %>%
.$amp %>%
mice(m = 5, maxit = 5, method = "norm", print = FALSE)
}, .options = furrr_options(seed = 123))
# Evaluate 25% MCAR
eval_mcar_25 <- evaluate_simulation(mbased_MCAR_25)
eval_mcar_25
